import json
import requests
import time
from os.path import exists as file_exists
import datetime as dt


def get_giveways():
    request = requests.get(
        'https://skinsmonkey.com/api/giveaway')
    giveaways = request.json()
    if not file_exists('saved_giveaways.json'):
        with open('saved_giveaways.json', 'w') as file:
            json.dump({}, file)
    with open('saved_giveaways.json', 'r') as file:
        saved_giveaways = json.load(file)

    giveaway_ids = []
    for entry in giveaways:
        giveaway_ids.append(entry['id'])
    giveaways = {}
    for id in giveaway_ids:
        giveaways[id] = {}
        request = requests.get(
            'https://skinsmonkey.com/api/giveaway/'+id)
        giveaway_info = request.json()
        requirements = {}
        for entry in giveaway_info['requirements']:
            requirements[entry['type']] = entry['id']
        giveaways[id]['requirements'] = requirements
        giveaways[id]['status'] = giveaway_info.get('status')
        giveaways[id]['entries'] = giveaway_info.get('entries')
        giveaways[id]['winner'] = giveaway_info.get('winner')
        giveaways[id]['type'] = giveaway_info.get('type')
        giveaways[id]['reward'] = giveaway_info.get('reward')
        giveaways[id]['endsAt'] = giveaway_info.get('endsAt')
        saved_giveaways[id] = giveaways[id]

    with open('saved_giveaways.json', 'w') as file:
        json.dump(saved_giveaways, file)
    return giveaways


class User():
    def __init__(self, username: str, sm_sid: str):
        self.username = username
        self.sm_sid = sm_sid
        self.giveaways = {}

    def to_dict(self):
        user_dict = {'username': self.username,
                     'sm_sid': self.sm_sid,
                     'giveaways': self.giveaways}
        return user_dict

    @staticmethod
    def from_dict(user_dict):
        user = User(user_dict.get('username'), user_dict.get('sm_sid'))
        user.giveaways = user_dict.get('giveaways')
        return user

    def sign_up(self, entry_type: str | int = 'PASS'):
        types = ['PASS', 'SITE_EMAIL', 'STEAM_NAME',
                 'STEAM_AVATAR', 'STEAM_GROUP']
        if type(entry_type) == int:
            entry_type = types[entry_type]
        for id in self.giveaways:
            # Skip if the giveaway ended
            ends_at = self.giveaways.get(id, {}).get('endsAt')
            if ends_at is None:
                continue
            ends_at = dt.datetime.strptime(
                ends_at, '%Y-%m-%dT%H:%M:%S.%fZ')
            if ends_at < dt.datetime.now() - dt.timedelta(hours=2):
                continue
            # Skip if cooldown is still up
            last_entry_at = self.giveaways[id].get(entry_type + '_unlockedAt')
            deltas = {'DAILY': 1,
                      'WEEKLY': 12,
                      'MONTHLY': 24}
            if last_entry_at is not None:
                last_entry_at = dt.datetime.strptime(
                    last_entry_at, '%Y-%m-%dT%H:%M:%S.%fZ')
                if dt.timedelta(hours=deltas.get(self.giveaways[id].get('type')))+last_entry_at < dt.datetime.now() - dt.timedelta(hours=2):
                    continue
                # Skip if email/avatar/nickname/group bonus already claimed
                if entry_type in ['SITE_EMAIL', 'STEAM_NAME',
                                  'STEAM_AVATAR', 'STEAM_GROUP']:
                    continue

            requirement_id = self.giveaways.get(
                id, {}).get('requirements', {}).get(entry_type)
            url = f'https://skinsmonkey.com/api/giveaway/{id}/requirement/{requirement_id}/complete'
            time.sleep(1)
            request = requests.post(url, cookies={'sm_sid': self.sm_sid})
            response = request.json()
            if self.giveaways[id].get('my_entries') is None:
                self.giveaways[id]['my_entries'] = 0
            if response.get('error') is not None:
                print(f'{self.username}, {entry_type}:\n{url}\n{response}')
				# Save reward unlock time to not try and receive this reward later
                if response.get('error').get('message') == 'free-giveaway-requirement-already-unlocked':
                    unlock_time = (dt.datetime.now() - dt.timedelta(hours=4)
					               ).strftime('%Y-%m-%dT%H:%M:%S.%fZ')
                    self.giveaways[id][entry_type+'_unlockedAt'] = unlock_time
                    print(f"Saved unlock time as {unlock_time}")
                continue
            self.giveaways[id]['my_entries'] += response.get('entries')
            self.giveaways[id][entry_type +
                               '_unlockedAt'] = response.get('unlockedAt')

    def sign_up_for_everything(self):
        for type in ['PASS', 'SITE_EMAIL', 'STEAM_NAME',
                     'STEAM_AVATAR', 'STEAM_GROUP']:
            self.sign_up(type)

    def update_giveaways(self):
        new_giveways = get_giveways()
        # This has to be done instead of .update() cuz I do not want to lose saved data
        for id in new_giveways:
            if self.giveaways.get('id') is None:
                self.giveaways[id] = {}
            for key in new_giveways[id]:
                self.giveaways[id][key] = new_giveways[id][key]
