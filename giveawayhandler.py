import json
import requests
import time
from os.path import exists as file_exists
import datetime as dt


def get_giveways():
    request = requests.get(
        'https://skinsmonkey.com/api/giveaway')
    giveaways = request.json()
    if not file_exists('saved_giveaways.json'):
        with open('saved_giveaways.json', 'w') as file:
            json.dump({}, file)
    with open('saved_giveaways.json', 'r') as file:
        saved_giveaways = json.load(file)

    giveaway_ids = []
    for entry in giveaways:
        giveaway_ids.append(entry['id'])
    giveaways = {}
    for id in giveaway_ids:
        giveaways[id] = {}
        request = requests.get(
            'https://skinsmonkey.com/api/giveaway/'+id)
        giveaway_info = request.json()
        requirements = {}
        for entry in giveaway_info['requirements']:
            requirements[entry['type']] = entry['id']
        giveaways[id]['requirements'] = requirements
        giveaways[id]['status'] = giveaway_info.get('status')
        giveaways[id]['entries'] = giveaway_info.get('entries')
        giveaways[id]['winner'] = giveaway_info.get('winner')
        giveaways[id]['type'] = giveaway_info.get('type')
        giveaways[id]['reward'] = giveaway_info.get('reward')
        giveaways[id]['endsAt'] = giveaway_info.get('endsAt')
        saved_giveaways[id] = giveaways[id]

    with open('saved_giveaways.json', 'w') as file:
        json.dump(saved_giveaways, file)
    return giveaways


class User():
    _entry_types = ['PASS', 'SITE_EMAIL', 'STEAM_NAME',
                    'STEAM_AVATAR', 'STEAM_GROUP']

    giveaways = {}

    def __init__(self, username: str, sm_sid: str):
        self.username = username
        self.sm_sid = sm_sid
        self.unlock_times = {}
        self.entries = {}

    def to_dict(self):
        user_dict = {'username': self.username,
                     'sm_sid': self.sm_sid,
                     'unlock_times': self.unlock_times,
                     'entries': self.entries}
        return user_dict

    @staticmethod
    def from_dict(user_dict):
        user = User(user_dict.get('username'), user_dict.get('sm_sid'))
        user.unlock_times = user_dict.get('unlock_times')
        user.entries = user_dict.get('entries')
        return user

    @staticmethod
    def update_giveaways():
        User.giveaways = get_giveways()
        print('Giveaways updated')

    @staticmethod
    def giveaway_ended(giveaway_id: str):
        ends_at = User.giveaways.get(giveaway_id, {}).get('endsAt')
        if ends_at is None:
            return True
        ends_at = dt.datetime.strptime(
            ends_at, '%Y-%m-%dT%H:%M:%S.%fZ')
        if ends_at < dt.datetime.now() - dt.timedelta(hours=2):
            return True
        return False

    def is_on_cooldown(self, requirement_id: str, entry_type: str, giveaway_type: str):
        if requirement_id not in self.unlock_times:
            return False
        if entry_type in ['SITE_EMAIL', 'STEAM_NAME',
                          'STEAM_AVATAR', 'STEAM_GROUP']:
            return True
        deltas = {'DAILY': 1,
                  'WEEKLY': 12,
                  'MONTHLY': 24}
        last_unlock = self.unlock_times.get(requirement_id)
        last_unlock = dt.datetime.strptime(
            last_unlock, '%Y-%m-%dT%H:%M:%S.%fZ')
        delta = dt.timedelta(hours=deltas.get(giveaway_type, 0))
        return (last_unlock + delta >= dt.datetime.now() - dt.timedelta(hours=2))

    def sign_up(self, giveaway_id: str, requirement_id: str):
        url = f'https://skinsmonkey.com/api/giveaway/{giveaway_id}/requirement/{requirement_id}/complete'
        time.sleep(1)
        request = requests.post(url, cookies={'sm_sid': self.sm_sid})
        response = request.json()
        if self.entries.get(giveaway_id) is None:
            self.entries[giveaway_id] = None
        if response.get('error') is not None:
            print(f'{self.username}:\n{url}\n{response}')
            return response.get('error').get('message')
        unlock_time = (dt.datetime.now() - dt.timedelta(hours=2)
                       ).strftime('%Y-%m-%dT%H:%M:%S.%fZ')
        self.unlock_times[requirement_id] = unlock_time
        print(f"Saved unlock time as {unlock_time}")
        if self.entries.get(giveaway_id) is None:
            self.entries[giveaway_id] = 0
        self.entries[giveaway_id] += int(response.get('entries', 0))
        print(
            f'Added {response.get("entries", 0)} entries, total: {self.entries[giveaway_id]}')

    def sign_up_to_all(self):
        if not User.giveaways:
            User.update_giveaways()
        for id in User.giveaways:
            if User.giveaway_ended(id):
                User.update_giveaways()
                break
        for id in User.giveaways:
            for entry_type in User._entry_types:
                requirement_id = User.giveaways.get(
                    id, {}).get('requirements', {}).get(entry_type)
                giveaway_type = User.giveaways[id].get('type')
                if self.is_on_cooldown(requirement_id, entry_type, giveaway_type):
                    continue
                error = self.sign_up(id, requirement_id)
                if error is None:
                    continue
                if error == 'free-giveaway-requirement-already-unlocked':
                    unlock_time = (dt.datetime.now() - dt.timedelta(hours=2)
                                   ).strftime('%Y-%m-%dT%H:%M:%S.%fZ')
                    self.unlock_times[requirement_id] = unlock_time
                    print(f"Saved unlock time as {unlock_time}")
                    if self.entries.get(id) is None:
                        self.entries[id] = 0
