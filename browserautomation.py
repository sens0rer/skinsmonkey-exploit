from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.wait import WebDriverWait, TimeoutException
from selenium.webdriver.support import expected_conditions as EC
import time
import os
import steam.guard as guard
import base64
import emailhandling as email
from os.path import exists as file_exists
import json


def steam_login(driver, username: str, password: str, shared_secret: str = None):
    driver.get('https://store.steampowered.com/login/')
    WebDriverWait(driver, 20).until(EC.presence_of_element_located(
        (By.CSS_SELECTOR, 'div[class^="newlogindialog"]')))
    username_field = driver.find_element(By.CSS_SELECTOR, 'input[type=text]')
    password_field = driver.find_element(
        By.CSS_SELECTOR, 'input[type=password]')
    username_field.send_keys(username)
    password_field.send_keys(password)
    password_field.submit()
    print(f'Logging in to {username} on Steam')
    # Auth code handling
    try:
        if shared_secret:
            WebDriverWait(driver, 20).until(EC.presence_of_element_located(
                (By.CSS_SELECTOR, 'div[class^="newlogindialog_SegmentedCharacterInput"]')))
            auth_code = guard.generate_twofactor_code(
                base64.b64decode(shared_secret+"=="))
            for i, char in enumerate(auth_code):
                code = driver.find_element(
                    By.CSS_SELECTOR, f'input[type=text]:nth-of-type({i+1})')
                code.send_keys(char)
    except TimeoutException:
        pass
    WebDriverWait(driver, 60).until(
        lambda driver: driver.current_url != "https://store.steampowered.com/login/")
    print(f'Successfully logged in to {username} on Steam')


def manual_phone_authcode():
    return input('\nInput the authcode sent to your phone: ')


def manual_email_confirmation():
    input("\nPress Enter when you've clicked the link sent to your email")


def auto_email_confirmation(confirmation_url_provider: callable, provider_args: list = [], provider_kwargs: dict = {}):
    url = confirmation_url_provider(*provider_args,**provider_kwargs)
    driver = webdriver.Chrome()
    driver.get(url)
    WebDriverWait(driver, 20).until(EC.presence_of_element_located(
                (By.CSS_SELECTOR, 'img')))

def add_phone_number(driver,
                     phone_number,
                     SMScode_provider: callable = manual_phone_authcode,
                     SMScode_args: list = [],
                     SMScode_kwargs: dict = {},
                     email_confirmation_provider: callable = manual_email_confirmation,
                     email_args: list = [],
                     email_kwargs: dict = {}):
    driver.get('https://store.steampowered.com/phone/add')
    phone_field = driver.find_element(By.ID, "tel_entry")
    phone_field.send_keys(phone_number)
    submit_button = driver.find_element(
        By.CSS_SELECTOR, 'span[onclick="handleNextButton()"]')
    submit_button.click()
    print("Confirmation link sent to your email")
    email_confirmation_provider(*email_args, **email_kwargs)
    submit_button = driver.find_element(
        By.CSS_SELECTOR, 'span[onclick="handleNextButton()"]')
    submit_button.click()
    print("Authcode sent to your phone")
    SMScode = SMScode_provider(*SMScode_args, **SMScode_kwargs)
    code_field = driver.find_element(By.ID, "text_entry")
    code_field.send_keys(SMScode)
    submit_button = driver.find_element(
        By.CSS_SELECTOR, 'span[onclick="handleNextButton()"]')
    submit_button.click()
    WebDriverWait(driver, 20).until(EC.presence_of_element_located(
        (By.CSS_SELECTOR, 'span[onclick="handleDoneButton()"]')))
    print('Phone number added successfully')


def set_skinsmonkey_requirements_on_steam(driver):
    # Join Steam group
    driver.get('https://steamcommunity.com/groups/skinsmonkey')
    driver.execute_script(
        "javascript:document.forms['join_group_form'].submit();")
    print(f'Successfully joined the SkinsMonkey Steam group')
    # Change avatar
    driver.get('https://steamcommunity.com/my/edit/avatar')
    avatar = driver.find_element(By.CSS_SELECTOR, 'input[type=file]')
    avatar.send_keys(os.getcwd()+"\\imgs\\skinsmonkey.jpg")
    save = driver.find_element(
        By.CSS_SELECTOR, 'button.DialogButton._DialogLayout.Primary.Focusable')
    time.sleep(5)
    save.click()
    print(f'Successfully changed the avatar')
    # Add #SkinsMonkey to the nickname
    driver.get("https://steamcommunity.com/my/edit/info")
    name = driver.find_element(By.CSS_SELECTOR, 'input[name=personaName]')
    current_name = name.get_attribute('value')
    if '#SkinsMonkey' not in current_name:
        # Erase
        name.send_keys(1000*'\b')
        name.send_keys(current_name[0:20]+'#SkinsMonkey')
        save = driver.find_element(
            By.CSS_SELECTOR, 'button.DialogButton._DialogLayout.Primary.Focusable')
        time.sleep(2)
        save.click()
    print(f'Successfully added #SkinsMonkey to the nickname')

    # Set inventory to public
    driver.get('https://steamcommunity.com/my/edit/settings')
    inv_privacy = driver.find_element(
        By.XPATH, '/html/body/div[1]/div[7]/div[3]/div/div[2]/div/div/div[3]/div[3]/div[2]/div/div[6]/div[7]/div')
    inv_privacy.click()
    inv_privacy_set = driver.find_element(
        By.XPATH, '/html/body/div[4]/div/div[1]')
    inv_privacy_set.click()
    print(f"Successfully set inventory to public")


def get_tradelink(driver):
    driver.get(
        'https://steamcommunity.com/my/tradeoffers/privacy#trade_offer_access_url')
    trade_link_field = driver.find_element(
        By.CSS_SELECTOR, 'input.trade_offer_access_url')
    trade_link = trade_link_field.get_attribute('value')
    print(f'Fetched the tradelink:\n{trade_link}')
    return trade_link


def skinsmonkey_login(driver, username: str, trade_link: str):
    driver.get('https://skinsmonkey.com')
    # Do not remove this sleep
    time.sleep(3)
    WebDriverWait(driver, 10).until(EC.presence_of_element_located(
        (By.XPATH, '/html/body/div[1]/div/div/div[1]/div/div[2]/div[3]/div')))
    login_button = driver.find_element(
        By.XPATH, '/html/body/div[1]/div/div/div[1]/div/div[2]/div[3]/div')
    login_button.click()
    WebDriverWait(driver, 20).until(EC.presence_of_element_located(
        (By.CSS_SELECTOR, 'input.btn_green_white_innerfade')))
    steam_login = driver.find_element(
        By.CSS_SELECTOR, 'input.btn_green_white_innerfade')
    steam_login.click()
    print(f'Successfully logged in to SkinsMonkey')
    try:
        # Runs if it's the first login on skinsmonkey and email/tradelink are not set
        WebDriverWait(driver, 10).until(EC.presence_of_element_located(
            (By.CSS_SELECTOR, 'div.modal-registration__description')))
        trade_link_field = driver.find_element(
            By.XPATH, '/html/body/div[1]/div/div/div[4]/div/div/div/div/div/div[1]/form/div[1]/div/input')
        trade_link_field.send_keys(trade_link)
        email_field = driver.find_element(
            By.XPATH, '/html/body/div[1]/div/div/div[4]/div/div/div/div/div/div[1]/form/div[2]/div/input')
        email_field.send_keys(username.lower()+'@csgofarm.space')
        checkbox = driver.find_element(
            By.XPATH, '/html/body/div[1]/div/div/div[4]/div/div/div/div/div/div[1]/form/div[3]/label/span[1]')
        checkbox.click()
        confirmation_button = driver.find_element(
            By.XPATH, '/html/body/div[1]/div/div/div[4]/div/div/div/div/div/div[1]/form/div[4]/div')
        confirmation_button.click()
        print(f'{username} tradelink and email set. Email pending confirmation')
    except TimeoutException:
        print(f'{username} is already registered on SkinsMonkey')


def save_skinsmonkey_sid(driver, username: str):
    if not file_exists('saved_SIDs.json'):
        with open('saved_SIDs.json', 'w') as file:
            json.dump({}, file)
    sid = driver.get_cookie('sm_sid').get('value')
    with open('saved_SIDs.json', 'r') as file:
        sid_dict = json.load(file)
    sid_dict[username] = sid
    with open('saved_SIDs.json', 'w') as file:
        json.dump(sid_dict, file)
    return sid_dict
